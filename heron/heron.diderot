/* ==========================================
## heron.diderot: Computing square roots via Heron's method

This program finds square roots of numval reals between minval and maxval
using Heron's method (aka the Babylonion method)
https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method

After compiling, you can run this program with:

	./heron

The output stores four numbers for each value processed (by index along fast axis):
<ol start=0>
<li> the value whose square root was found
<li> the computed square root
<li> the number of iterations taken to compute it
<li> the error, relative to Diderot's sqrt() function
</ol>
To see the values (one set of 4 numbers per line):

	unu save -f text -i vrie.nrrd

You can see that with the defaults, it took at most 7 iterations to converge:

	unu slice -i vrie.nrrd -a 0 -p 2 | unu minmax -

The command-line executables produced by Diderot have hest-generated
usage infomation. Try:

	./heron --help

to see how to set the input values and output filename stem.  Note
that the input variables self-document their purpose with ("...")
annotations, which are in turn included in the generated `--help`
usage information.  So the declarations:

	input real minval ("min value to find root of") = 1;
	input real maxval ("max value to find root of") = 100;
	input int numval ("how many values to compute") = 100;
	input real eps ("relative error convergence test") = 0.000001;

become in the usage information:

	  -minval <x> = min value to find root of (double); default: "1"
	  -maxval <x> = max value to find root of (double); default: "100"
	-numval <int> = how many values to compute (long int); default: "100"
	     -eps <x> = relative error convergence test (double); default: "1e-06"

There are also command-line options that are unrelated to input variables:

	     -l <int> , --limit <int> = specify limit on number of super-steps (0
	                means unlimited) (unsigned long int); default: "0"
	 -print <str> = specify where to direct printed output (string); default: "-"
	           -v , --verbose = enable runtime-system messages
	           -t , --timing = enable execution timing

heron.diderot shows the utility of `-l` option. If you try to increase the precision
of the result by lowering `eps`, as with:

	./heron -eps 1e-8

The program may not ever finish, because the limited precision of 32-bit
floats prevents the computation from reaching sufficient accuracy. So, noting
from above that at most 7 iterations were needed with the default `eps`, we
can run:

	./heron -eps 1e-8 -l 20

which will finish promptly because the computation is limited to 20
super-steps (the Diderot name for a program iteration, which can include
global computations that follow the per-strand `update`). However, the way
output variable `vrie` is initialized makes clear which strands never
stabilized because they were halted by the `-l 20` limit, visible with the
`-1`s in the text view of the output from `unu save -f text -i vrie.nrrd`
(try this!).

The consequences of active strands being halted by a super-step limit is
different for strand **collections** vs strand **arrays**.  If the program runs
as a collection of strands, i.e. the last line of the program is instead

	initially { sqroot(lerp(minval, maxval, 1, ii, numval)) | ii in 1 .. numval };

(note `initially {}` instead of `initially []`), then running `./heron -eps
1e-8 -l 20` will still finish after 20 super-steps, but no output values will
be saved for those strands that didn't stabilize in time.  That is, `unu save -f text
-i vrie.nrrd` will produce less than 100 lines of text, including only the
values for which the algorithm converged before 20 super-steps.

On the other hand, we can also increase the precision of a Diderot
`real` itself by using a C `double` to store a `real`, instead of a (single-precision) `float`,
the default.  We do this by compiling with:

	diderotc --double --exec heron.diderot

at which point `./heron -eps 1e-8` will finish, producing roots for all values
in the [minval,maxval] range.
========================================== */

input real minval ("min value to find root of") = 1;
input real maxval ("max value to find root of") = 100;
input int numval ("how many values to compute") = 100;
input real eps ("relative error convergence test") = 0.000001;

/* One strand per value. The name of the strand need
   not be related to the name of the source file. */
strand sqroot (real val) {
   real root = val; // initialize with sqrt(N) = N
   int iter = 0;    // count iterations required
   /* the output: value, root, iters, error. In Diderot, all
      strand variables must be initialized at declaration. */
   output vec4 vrie = [val,-1,-1,-1];

   // Each update does one iteration of Heron's method.
   update {
      if (val <= 0) {
         // No work to do
         stabilize;
      }
      root = (root + val/root) / 2.0;
      iter += 1; // "iter++;" is not in the syntax
      /* The convergence test expression below is a manual re-write of
         (|root^2 - val|/val < eps) to increase numerical precision. However
         that expression would compile too because ^ is exponentiation. */
      if (|(root/val)*root - 1| < eps) {
         stabilize;
      }
   }
   /* The stabilize method is called upon strand stabilization;
      you can use this to do some post-processing on whatever
      computation has finished, prior to saving the output */
   stabilize {
      // We use the sqrt() builtin to report actual relative error
      vrie = [val, root, iter, (root-sqrt(val))/sqrt(val)];
   }
}

/* Initialize strands with value to take the square root of; with this
   5-argument lerp, the output ranges from minval to maxval as ii ranges
   from 1 to numval. The "initially [];" creates an array of strands
   (as opposed to a collection, created by "initially {};"). */
initially [ sqroot(lerp(minval, maxval, 1, ii, numval)) | ii in 1 .. numval ];
