#version 1.0
/* ==========================================
## hello.diderot: The usual greeting, in Diderot

After compiling `hello.diderot`, you run it with:

	#!
	#=diderotc
	./hello
	#_junk out.nrrd
After the `hello` executable prints `hello, world`, it saves a single-element
1-D array into `out.nrrd`.  We can inspect its contents with:

	unu save -f text -i out.nrrd
which should print the number 42.
========================================== */

/* Strands normally have parameters, so that different strands can be
   initialized with different values. This unusual case, with only a single
   strand, does not need parameters (and having an unused parameter would
   produce a warning.  */
strand hello () {
   /* Every Diderot program must have at least one output variable. */
   output int out = 42;

   update {
      print("hello, world\n");

      /* this minimal program can be repurposed as a simple expression
         debugging tool. For example, if you were uncertain about the
         order of arguments to atan2(), you could use:

      real a = 0; real b = 1;
      print("atan2(", a, ",", b, ") = ", atan2(a,b), "\n");

         to learn that atan2(0,1) = 0, so its atan2(y,x), like in C. */

      /* The strand runs for only its initial iteration, then stops
         by stabilizing, which stores the final value of the output. */
      stabilize;
   }
}
initially [ hello() | ii in 0..0 ];  // only one strand
