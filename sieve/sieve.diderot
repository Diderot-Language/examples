#version 1.0
/* ==========================================
## sieve.diderot: Sieve of Eratosthenes

The [Sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)
for finding prime numbers provides a way to demonstrate three Diderot language feaures:

1. By executing `die`, strands exit the computation without saving their output.
2. The `global` update block contains code to run between per-strand updates.
3. The `global` update can use global reductions to compute properties of the set of extent strands.

This program takes one input int `NN`, the highest number to test for
primality.  Execution starts by creating strands for every integer from 2 to
NN. At each iteration, one strand may stabilize (and save its value `pp`) if
it is the next prime; otherwise strands die off if they are a multiple of the
most recent prime found. The global update looks through the remaining strands
to find the smallest value, which is the next prime.

Try adding `print()` statements to the program (either within the strand
`update` or the `global` update) to clarify which strands are active
for which iteration, and when they die off.

After running the program with `./sieve` or, say, `./sieve -NN 1000`, the
output (one prime per line) can be shown with:
<!--(ignore lines starting with "\tab#"; for testing with ../runtests.sh)-->

	#!
	#=diderotc
	#_ ./sieve -NN 1000
	#_ junk pp.nrrd
	unu save -f text -i pp.nrrd

or to put all the primes on one line:

	#R
	unu axinsert -i pp.nrrd -a 1 | unu save -f text

which can be checked against [lists of prime numbers](http://primos.mat.br/indexen.html).
========================================== */

input int NN ("highest number to test for primality") = 100;

int nextp = 2; // first prime to find

// Each strand tests one integer, ii, for primality
strand test(int ii) {
   output int pp = ii; // Only the primes will actually get saved
   update {
      if (nextp == pp) {
         stabilize;    // This adds the value nextp to the saved output
      } else if (ii % nextp == 0) {
         die;          // Can't be a prime, discard this value
      }
   }
}

/* This global update code runs after all the individual strands have run
   their update{} methods. This is where global variables (like nextp) may be
   modified, and it is where we can perform computations that summarize
   something about the remaining active strands with a "global reduction". This
   reduction finds the minimum value of `pp` among the active strands, which
   must be the next prime number. */
global {
   nextp = min { T.pp | T in test.active };
}

/* Start a collection of strands on integers 2 through NN. Only in a
   collection can strands `die`.  Had strands been created in an array
   with `initially []`, use of `die` would cause a compile-time error. */
initially { test(ii) | ii in 2..NN };
