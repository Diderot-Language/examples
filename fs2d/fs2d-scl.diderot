/*
** Utility for generating synthetic (scalar) 2D data on oriented grids
** The input arguments here make it easy to sample the same underlying
** function on grids with differing orientation, resolution, and shear.
**
** Assuming the directions at https://github.com/Diderot-Language/examples
** this program can be compiled with:

../../vis12/bin/diderotc --exec heron.diderot

** The "-which" option will determine which function is sampled; look
** for "(0 == which)" below to see the function definitions.
** This program is unusual in that its printed output needs to be captured
** in order to have a NRRD header that records the orientation of the
** sampling grid, so using the program involves redirection.  To
** get a self-contained parab.nrrd containing a parabola function
** (assuming sh/bash redirection):

./fs2d-scl -which 2  2>&1 | unu save -f nrrd -o parab.nrrd
rm out.nrrd

*/

input int size0 = 101;  // # samples on faster axis
input int size1 = 100;  // # samples on slower axis
input real width = 1;   // approx width of world-space region sampled
input vec2 off = [0,0]; // translation offset from origin-centered grid
input real shear = 0;   // amount of shear in sampling grid
input real angle = 0;   // orientation (in degrees) of faster axis
input int which = 0;    // which function to sample
input vec4 parm = [0,0,0,0]; // parameters that functions may use

real theta = angle*π/180;
// rotation by theta of [1,0] towards [0,1]
tensor[2,2] rot = [[cos(theta),-sin(theta)],[sin(theta),cos(theta)]];
// sample spacing on faster and (unsheared) slower axis
vec2 spc = [width/(size0-1), width/(size1-1)];
// inter-sample vector on faster axis
vec2 edge0 = rot•[spc[0], 0];
// inter-sample vector on slower axis
vec2 edge1 = rot•[0, spc[1]] + shear*edge0;
// location of first sample
vec2 orig = -(edge0*(size0-1) + edge1*(size1-1))/2 + off;

// the function to evaluate at each grid point
function real func(vec2 pos) {
   real x = pos[0];
   real y = pos[1];
   real ret = 0;
   if (0 == which) {        // 0: x ramp
      ret = x;
   } else if (1 == which) { // 1: y ramp
      ret = y;
   } else if (2 == which) { // 2: parabola
      ret = pos•pos;
   } else if (3 == which) { // 3: Tschirnhausen cubic
      // using 4*y^2 instead of y^2 for aesthetic reasons
      ret = x^3 + 3*x^2 - 4*y^2;
   } else if (4 == which) { // 4: sine waves
      ret = sin((1 + parm[0])*(x + parm[1]))
          + sin((1 + parm[2])*(y + parm[3]));
   } else {
      print("HEY no function defined for which == ", which, "\n");
   }
   return ret;
}

strand sample(int idx0, int idx1) {
   output real out = 0.0;
   update {
      /* Diderot doesn't (currently) allow print statements from global
         initialization, so to print something once per program, you
         need to test for a condition that will be true for one strand */
      if (0 == idx0 && 0 == idx1) {
         print("NRRD0004\n");
         print("# Complete NRRD file format specification at:\n");
         print("# http://teem.sourceforge.net/nrrd/format.html\n");
         // NOTE: this assumes we haven't been compiled with --double
         print("type: float\n");
         print("dimension: 2\n");
         print("sizes: ", size0, " ", size1, "\n");
         print("kinds: space space\n");
         // NOTE: this assumes machine endianness
         print("endian: little\n");
         print("encoding: raw\n");
         print("space dimension: 2\n");
         print("space directions: (", edge0[0], ",", edge0[1],
                               ") (", edge1[0], ",", edge1[1], ")\n");
         print("space origin: (", orig[0], ",", orig[1], ")\n");
         // NOTE: this assumes output filename is not explicitly set
         print("data file: out.nrrd\n");
         print("byte skip: -1\n");
      }
      out = func(orig + idx0*edge0 + idx1*edge1);
      stabilize;
   }
}

initially [ sample(idx0, idx1)
           | idx1 in 0..(size1-1),   // SLOWER axis
             idx0 in 0..(size0-1) ]; // FASTER axis
