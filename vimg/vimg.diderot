/* ==========================================
## vimg.diderot: 2D image sampler/viewer

This program needs a dataset to render, and a colormap, for example:

	ln -s ../data/sscand.nrrd img.nrrd
	ln -s ../cmap/spiral.nrrd cmap.nrrd

When you compile this program (with `diderotc --exec vimg.diderot`)
the compiler will see that specific datafiles are named in the declaration
of the input image and colormap data:

	input image(2)[] img ("2D image dataset to view") = image("img.nrrd");
	input image(1)[3] cmimg ("colormap to use") = image("cmap.nrrd");

and the compiler will specialize some of the generated code according
to properties of that data in those files (which is why we wanted to
get those files in place before running the compiler).  In talking
about the action of the Diderot compiler, the named data files are
called *proxy files*. It is an error for a proxy file to not exist at
compilation. Without creating the `img.nrrd` file prior to
compilation, the compiler would exit with:

	[vimg.diderot] Error: proxy-image file "cmap.nrrd" does not exist

Currently, for arrays, the Diderot compiler specializes on the sample
type (the `type:` NRRD header field in `unu head img.nrrd`) and the array
axis sizes (`sizes:`). The compiler does not currently
specialize on array orientation (`space origin:` and `space directions:`).
The compiler will also check that the array dimension
(`dimension:`) and sample type (scalar, in this case) matches that of the
the array type declaration `image(2)[]`: `(2)` means a 2-D domain and
the shape `[]` means scalar-valued samples.  For the colormap, given the type
`image(1)[3]`, the compiler will check that `cmap.nrrd` is 1-D (`(1)`)
array of 3-vectors (`[3]`), which will be stored in NRRD as a 2-D 3-by-N array.
Multivariate samples always have their constituent values on the fastest
axis of the array. In the NRRD, the axes are tagged with a `kind` that can
disambiguate their purpose. `unu head cmap.nrrd` will show

	kinds: 3-vector space

which means that the 3-vectors components are on the faster axis, while
the sampling of 3-vectors over the 1-D domain happens on the slower axis.

In the generated command-line executable, the default value for the `-img`
option will be the filename `img.nrrd`, but other data can be supplied at
runtime (e.g. `-img otherimg.nrrd`) as long as the other data matches the
sample type, array dimension, and axis sizes of the proxy file.

If there is no proxy file named with the input image declaration, as with:

	input image(2)[] img ("2D image dataset to view");

then the compiler will assume `float` sample type, and will generate code that
checks that whatever array is supplied at runtime has the correct array
dimension and sample type, but will be general with respect to axis sizes.

The `-which` option will determine which function is sampled; look
for `(0 == which)` below to see the start of the function definitions.
Assuming the symbolic links given above (of `img.nrrd`
and `cmap.nrrd` to `../data/sscand.nrrd` and `../cmap/spiral.nrrd`
respectively), some examples usages are:
* Grayscale image of reconstructed field:  
   `./vimg -cent 290 414 -fov 45 -which 0`
* Grayscale image of gradient magnitude:  
   `./vimg -cent 290 414 -fov 45 -which 1`
* Color image of gradient vector (blue is always zero):  
   `./vimg -cent 290 414 -fov 45 -which 2`
* Colormapped field, with naive pseudo-isocontour:  
   `./vimg -cent 290 414 -fov 45 -which 3 -cmin -500 -cmax 1900 -iso 1210 -th 20`
* Colormapped field, with smarter pseudo-isocontour:  
   `./vimg -cent 290 414 -fov 45 -which 4 -cmin -500 -cmax 1900 -iso 1210 -th 0.2`
* Colormapped field, with ridge lines:  
   `./vimg -cent 290 414 -fov 45 -which 5 -cmin -500 -cmax 1900 -th 0.2 -sthr 2`
* Colormapped field, with valley lines:  
   `./vimg -cent 290 414 -fov 45 -which 6 -cmin -500 -cmax 1900 -th 0.2 -sthr 2`
* Colormapped field, with blue maxima:  
   `./vimg -cent 290 414 -fov 45 -which 7 -cmin -500 -cmax 1900 -th 0.25 -sthr 25 -fcol 0 0 0.8`
* Colormapped field, with green saddle points:  
   `./vimg -cent 290 414 -fov 45 -which 8 -cmin -500 -cmax 1900 -th 0.25 -fcol 0 1 0`
* Colormapped field, with cyan minima:  
   `./vimg -cent 290 414 -fov 45 -which 9 -cmin -500 -cmax 1900 -th 0.25 -sthr 25 -fcol 0 1 1`

Each command can be followed by `unu quantize -b 8 -i rgb.nrrd -o rgb.png` to create
an 8-bit image version of the output.  The `-which 3` and `-which 4` commands
show an important comparison, demonstrating how knowing the gradient permits
drawing of equal-thickness isocontours (according to the first-order Taylor
expansion).

Viewing `../data/sscand.nrrd` with the parameters above gives a roughly
100km view of the area around Geilo, Norway, site of the
[Winter School](http://www.sintef.no/projectweb/geilowinterschool/2016-scientific-visualization/)
for which this program was originally created.
========================================== */

input image(2)[] img ("2D image dataset to view") = image("img.nrrd");
input image(1)[3] cmimg ("colormap to use") = image("cmap.nrrd");
input vec2 cent ("center of viewing window") = [0,0];
input real fov ("height of viewing window") = 2;
input int sz0 ("# of horizontal samples in viewing window") = 640;
input int sz1 ("# of vertical samples in viewing window") = 480;
input real angle ("orientation (in counter-clockwise degrees) of viewing window") = 0;
input vec3 bkgd ("RGB color to show outside image domain") = [0.2,0.1,0.1];
input vec3 fcol ("RGB color to show inside features") = [0.0,0.0,0.0];
input int which ("what to show about the image, currently from 0 to 9") = 0;
input real iso ("value at which to show approximate isocontour") = 0;
input real th ("apparent thickness of feature (meaning varies depending on which)") = 1;
input real cmin ("value to use at min end of colormap") = 0;
input real cmax ("value to use at max end of colormap") = 1;
input real seps ("epsilon >= 0 value to use in divisor when computing strength") = 0.001;
input real sthr ("strength threshold for showing ridges and valleys") = 0;

/*
The field to sample and view; needs to be more or less differentiable
depending on what we want to do with it.
C1 kernels include: c1tent, ctmr, bspln3, c4hexic
C2 kernels include: c2ctmr, bspln3, c4hexic
*/
field#2(2)[] F = c4hexic ⊛ img;

/*
The colormap can always use tent; it is not differentiated.  Note the
clamp() here: it means that before evaluating cmap(x), x will be clamped to
inside the domain of cmap, as defined by the location of the samples in the
cmimg, and the support of the reconstruction filter tent.  From a
functional sense, it might make more sense for the notation to use
composition: "tent⊛cming◦clamp": clamp first, then lookup into cmimg and
reconstruct with tent, but this looks a bit weird.
*/
field#0(1)[3] cmap = tent ⊛ clamp(cmimg);

// compute the image-to-world transform based on specification
// of the viewing window
real wdth = fov*sz0/sz1;
real phi = angle*π/180;
tensor[2,2] rot = [[cos(phi),sin(phi)],[-sin(phi),cos(phi)]];
vec2 spc = [wdth/(sz0-1), fov/(sz1-1)];
vec2 dir0 = rot•[spc[0], 0];
vec2 dir1 = rot•[0, spc[1]];
vec2 orig = cent - (dir0*(sz0-1) + dir1*(sz1-1))/2;

// A function that is 1 at 0, and goes down linearly to 0 according to
// thickness parameter th. Note that if a function is a simple expression like
// this it can be defined with a single `=`, with no need for a `return`
// inside a sequence of statements. You might want to call this function
// "tent" but that name is already taken by a kernel.
function real bump(real z) = max(0, 1 - |z|/th);

strand sample(int ui, int vi) {
   // The output type for a Diderot program is fixed at compile-time,
   // regardless of input variable values or execution outcomes. So
   // this program sometimes saves what is really just grayscale
   // information in an RGB color image.
   output vec3 rgb = bkgd;
   real ll = 0;
   update {
      vec2 x = orig + ui*dir0 + vi*dir1;
      if (inside(x, F)) {
         if (0 == which) {
            // the image value itself
            real y = F(x);
            rgb = [y,y,y];
         } else if (1 == which) {
            // the gradient magnitude
            real y = |∇F(x)|;
            rgb = [y,y,y];
         } else if (2 == which) {
            // the gradient vector, saved in
            // first two components of output
            vec2 gg = ∇F(x);
            rgb = [gg[0],gg[1],0];
         } else if (3 == which) {
            /* Colormapped, with simple value-based isocontour. Note that
            there isn't (currently) a way to learn within the language what
            the domain of colormap (or of any field) is, so rescaling the
            function range to [0,1] here reflects either prior knowledge
            or an assumption about the orientation meta-data in whatever
            cmap.nrrd links to. There is no need to clamp before evaluating
            cmap(); that is handled by the clamp in cmap's declaration */
            rgb = cmap(lerp(0,1,cmin,F(x),cmax));
            ll = bump(F(x) - iso);
         } else if (4 == which) {
            // colormapped, with Newton-based isocontour
            rgb = cmap(lerp(0,1,cmin,F(x),cmax));
            ll = bump((F(x) - iso)/|∇F(x)|);
         } else if (5 == which) {
            // colormapped, with Newton-based ridge line
            rgb = cmap(lerp(0,1,cmin,F(x),cmax));
            vec2{2} evec = evecs(∇⊗∇F(x));
            real{2} eval = evals(∇⊗∇F(x));
            real strn = -eval{1}/(|∇F(x)| + seps);
            if (eval{1} < 0 && strn > sthr) {
               vec2 delta = (evec{1}⊗evec{1}/eval{1})•∇F(x);
               ll = bump(|delta|);
            }
         } else if (6 == which) {
            // colormapped, with Newton-based valley line
            rgb = cmap(lerp(0,1,cmin,F(x),cmax));
            vec2{2} evec = evecs(∇⊗∇F(x));
            real{2} eval = evals(∇⊗∇F(x));
            real strn = eval{0}/(|∇F(x)| + seps);
            if (eval{0} > 0 && strn > sthr) {
               vec2 delta = (evec{0}⊗evec{0}/eval{0})•∇F(x);
               ll = bump(|delta|);
            }
         } else if (7 == which || 8 == which || 9 == which) {
            // colormapped, with critical points
            rgb = cmap(lerp(0,1,cmin,F(x),cmax));
            // Like in matlab and numpy, "inv" is matrix inverse
            vec2 delta = inv(∇⊗∇F(x))•∇F(x);
            real{2} eval = evals(∇⊗∇F(x));
            if (7 == which) {        // maxima
               if (eval{0} < 0 && eval{1} < 0 && eval{0} < -sthr) {
                  ll = bump(|delta|);
               }
            } else if (8 == which) { // saddle
               if (eval{0} > 0 && eval{1} < 0) {
                  ll = bump(|delta|);
               }
            } else {  // 9 == which:  minima
               if (eval{0} > 0 && eval{1} > 0 && eval{1} > sthr) {
                  ll = bump(|delta|);
               }
            }
         } else {
            // update "input int which" annotation above as cases are added
            print("Sorry, no function defined for which = ", which, "\n");
         }
         rgb = lerp(rgb, fcol, ll);
      }
      stabilize;
   }
}

initially [ sample(ui, vi) | vi in 0..(sz1-1),
                             ui in 0..(sz0-1) ];
