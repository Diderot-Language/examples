/* ==========================================
## matx.diderot: demo of how matrices and tensors work

(under construction)

========================================== */

input vec3 r0 ("1st row of test values") = [3,5,7];
input vec3 r1 ("2nd row of test values") = [4,9,2];
input vec3 r2 ("3rd row of test values") = [8,1,6];

strand go (int ii) {
   output real out = 0;
   update {
      print("\ngiven rows r0, r1, r2\n");
      // showing how to index into vector, and print it
      print("r0 = [", r0[0], ",", r0[1], ",", r0[2], "] = ", r0, "\n");
      print("r1 = [", r1[0], ",", r1[1], ",", r1[2], "] = ", r1, "\n");
      print("r2 = [", r2[0], ",", r2[1], ",", r2[2], "] = ", r2, "\n");

      // showing how a matrix is a vector of *rows*
      tensor[3,3] mm=[r0,r1,r2];
      // These recover the given rows, given the assumption that the indexing
      // into matrix is mm[rowIndex, colIndex] (same as linear algebra)
      print("\nprinting tensor[3,3] mm\n");
      // HEY replace end of line "]\n"); with "] = ", mm[0,:], "\n");
      print("mm[0,:] = [", mm[0,0], ",", mm[0,1], ",", mm[0,2], "]\n");
      print("mm[1,:] = [", mm[1,0], ",", mm[1,1], ",", mm[2,2], "]\n");
      print("mm[2,:] = [", mm[2,0], ",", mm[2,1], ",", mm[2,2], "]\n");

      // HEY should be able to: print("mm = ", mm, "\n");

      // another way to recover rows
      print("\ncolumn vector times matrix\n");
      vec3 rr0 = [1,0,0]•mm;
      vec3 rr1 = [0,1,0]•mm;
      vec3 rr2 = [0,0,1]•mm;
      print("rr0 = [", rr0[0], ",", rr0[1], ",", rr0[2], "] = ", rr0, "\n");
      print("rr1 = [", rr1[0], ",", rr1[1], ",", rr1[2], "] = ", rr1, "\n");
      print("rr2 = [", rr2[0], ",", rr2[1], ",", rr2[2], "] = ", rr2, "\n");

      print("\nrow vector times matrix\n");
      // "row vector times matrix": a way to recover columns
      vec3 cc0 = mm•[1,0,0];
      vec3 cc1 = mm•[0,1,0];
      vec3 cc2 = mm•[0,0,1];
      print("cc0 = [", cc0[0], ",", cc0[1], ",", cc0[2], "] = ", cc0, "\n");
      print("cc1 = [", cc1[0], ",", cc1[1], ",", cc1[2], "] = ", cc1, "\n");
      print("cc2 = [", cc2[0], ",", cc2[1], ",", cc2[2], "] = ", cc2, "\n");
      stabilize;
   }
}

initially [ go(ii) | ii in 0..0 ];  // only one strand
